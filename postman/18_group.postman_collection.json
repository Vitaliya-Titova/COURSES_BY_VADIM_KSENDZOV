{
	"info": {
		"_postman_id": "cb9da9e2-8065-42a5-921a-63a6d4a7b7e2",
		"name": "18_group",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_POSTMAN",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "Vitaliya",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Vita",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//) Проверка структуры json в ответе.\r",
									"let person = pm.response.json();\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"required\": \r",
									"  [\"person\",\"qa_salary_after_12_months\",\"qa_salary_after_6_months\",\"start_qa_salary\"],\r",
									"  \"properties\": {\r",
									"    \"person\": {\"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\"type\": \"integer\"},\r",
									"        \"u_name\": {\"type\": \"array\",\r",
									"          \"items\": [ { \"type\": \"null\"},\r",
									"            {\"type\": \"integer\"},\r",
									"            {\"type\": \"integer\"}]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
									"      },\r",
									"      \"required\": [\"u_age\",\"u_name\",\"u_salary_1_5_year\"]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  }  \r",
									"pm.test('Schema is valid', function () {\r",
									"let isValidSchema = tv4.validate(person, schema, true, true);\r",
									"pm.expect(isValidSchema).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//3) тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"salary\",  function(){\r",
									"let jsonData = pm.response.json();\r",
									"pm.expect(parseInt(jsonData.start_qa_salary)).to.eql(jsonData.start_qa_salary);\r",
									"pm.expect(parseInt(jsonData.qa_salary_after_6_months)).to.eql(jsonData.start_qa_salary*2);\r",
									"pm.expect(parseInt(jsonData.qa_salary_after_12_months)).to.eql(jsonData.start_qa_salary*2.9);\r",
									"pm.expect(parseInt(jsonData.person.u_salary_1_5_year)).to.eql(jsonData.start_qa_salary*4);\r",
									"});\r",
									"\r",
									"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://116.203.27.46:5002/get_test_user\r",
									"pm.test(\"u_salary\",function() {\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);});\r",
									"\r",
									" const options = {\r",
									"    'method':\"POST\",\r",
									"   'url': \"http://116.203.27.46:5002/get_test_user\",\r",
									"   'body': {\r",
									"    mode: \"formdata\", formdata: JSON.stringify('u_salary_1_5_year')\r",
									"   }\r",
									"};\r",
									"pm.sendRequest(options,(error, response) => {\r",
									"if (error) throw new Error (error);\r",
									"console.log(response); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 28,\r\n    \"salary\": 2000,\r\n    \"name\": \"Vitaliya\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"let person = pm.response.json();\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\"age\",\"name\",\"salary\"],\r",
									"  \"properties\": {\r",
									"    \"age\": {\"type\": \"integer\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"salary\": {\"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\"type\": \"integer\"},\r",
									"        {\"type\": \"string\" },\r",
									"        {\"type\": \"string\"}\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									" }\r",
									"pm.test('Schema is valid', function () {\r",
									"let isValidSchema = tv4.validate(person, schema, true, true);\r",
									"pm.expect(isValidSchema).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//4)тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"salary_factor\",function() {\r",
									"let jsonData = pm.response.json();\r",
									"let salary = jsonData.salary[0];\r",
									"let salary1 = jsonData.salary[1];\r",
									"let salary2 = jsonData.salary[2];\r",
									"pm.expect(salary).to.eql(jsonData.salary[0]);\r",
									"pm.expect(parseInt(salary1)).to.eql(parseInt(jsonData.salary[0] * 2));\r",
									"pm.expect(parseInt(salary2)).to.eql(parseInt(jsonData.salary[0] * 3));\r",
									"console.log (salary, salary1,salary2);\r",
									"});\r",
									"\r",
									"//5) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"pm.test(\"result\",function() {\r",
									"let jsonData = pm.response.json();\r",
									"let salary = jsonData.salary[0];\r",
									"let salary1 = jsonData.salary[1];\r",
									"let salary2 = jsonData.salary[2];\r",
									"pm.expect(parseInt(salary2)).to.greaterThan(parseInt(jsonData.salary[1]));\r",
									"pm.expect(parseInt(salary2)).to.greaterThan(parseInt(jsonData.salary[0]));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "28",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "4000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Vita",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"let person = pm.response.json();\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\"type\": \"string\"},\r",
									"    \"family\": {\"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\"type\": \"string\"},\r",
									"                {\"type\": \"integer\"}\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\"type\": \"string\"},\r",
									"                {\"type\": \"integer\"}\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"salary\": {\"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function () {\r",
									"let isValidSchema = tv4.validate(person, schema, true, true);\r",
									"pm.expect(isValidSchema).to.be.true;\r",
									"});\r",
									"\r",
									"//3) значение поля name = значению переменной name из окружения\r",
									"pm.test('name = enviroment',function()\t{\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"name\",jsonData.name);\r",
									"pm.expect(jsonData.name).to.eql(\"Vitaliya\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//4) значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"pm.test('age response = age req',function()\t{\r",
									"let jsonData = pm.response.json();\r",
									"let reqData=request.data;\r",
									"pm.expect (jsonData.age).to.eql(reqData.age);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Vitaliya",
									"type": "text"
								},
								{
									"key": "age",
									"value": "28",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{u_salary_1_5_year}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/get_test_user",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"let pet_Oliver = pm.response.json();\r",
									"let schema = {\r",
									"   \"type\": \"object\",\r",
									"   \"required\": [\"age\",\"daily_food\",\"daily_sleep\",\"name\"],\r",
									"   \"properties\": {\r",
									"    \"age\": {\"type\": \"integer\"},\r",
									"    \"daily_food\": {\"type\": \"number\"},\r",
									"    \"daily_sleep\": {\"type\": \"number\"},\r",
									"    \"name\": {\"type\": \"string\"}\r",
									"  },\r",
									"}\r",
									"pm.test('Schema is valid', function () {\r",
									"let isValidSchema = tv4.validate(pet_Oliver, schema, true, true);\r",
									"pm.expect(isValidSchema).to.be.true;\r",
									"});\r",
									"\r",
									"//3) тесты по проверке правильности результата перемножения на коэффициент (weight)\r",
									"pm.test(\"weight_pet\",function() {\r",
									"let jsonData = pm.response.json();\r",
									"pm.expect(jsonData.daily_food).to.eql(request.data.weight * 0.012);\r",
									"pm.expect(jsonData.daily_sleep).to.eql(request.data.weight * 2.5);\r",
									"console.log (request.data.weight * 0.012, request.data.weight * 2.5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "1",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "120",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Oliver",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/test_pet_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//взять любой объект из присланного списка, используйте js random.\r",
									"pm.test(\"random_salary\",  function(){\r",
									"let jsonData = pm.response.json();\r",
									"let randomcurrency = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
									"pm.environment.set(\"random_number\", randomcurrency);\r",
									"pm.environment.set(\"Cur_ID\", randomcurrency.Cur_ID);\r",
									"console.log(randomcurrency);\r",
									"console.log(randomcurrency.Cur_Name);\r",
									"});\r",
									"\r",
									"\r",
									"/* 3 гл.составл цикла:\r",
									"- начало\r",
									"-условия \r",
									"-шаг\r",
									"for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2\r",
									"*/\r",
									"\r",
									"\t//// получить список валют \r",
									"pm.test(\"List_currency\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let num = 0\r",
									"    for (let i = 0;i< jsonData.length; i++);\r",
									"\r",
									" const options = {\r",
									"    'method':\"POST\",\r",
									"   'url': \"http://116.203.27.46:5002/curr_byn\",\r",
									"   'body': {\r",
									"    mode: \"formdata\", 'formdata':[\r",
									"{'key':'auth_token', 'value': pm.variables.get('token')},\r",
									"{'key': 'curr_code', 'value': pm.variables.get ('Cur_ID')}\r",
									"/*, formdata:[\r",
									"            {'key':'auth_token', 'value': pm.variables.get('token')}\r",
									"            ,{'key': 'curr_code', 'value': i}\r",
									"]*/\r",
									"    ]\r",
									"   }\r",
									"};\r",
									"pm.sendRequest(options,(error, response) => {\r",
									"if (response.code == 200){\r",
									"    console.log(response.json()); \r",
									"} else if (response.code == 500){\r",
									"num++\r",
									"} else {num++}\r",
									"});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/currency",
							"host": [
								"{{url}}"
							],
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//) Проверка структуры json в ответе.\r",
									"let person = pm.response.json();\r",
									"let schema = { \"type\": \"object\",\r",
									"                \"required\": [ \"Cur_Abbreviation\",\"Cur_ID\",\"Cur_Name\",\"Cur_OfficialRate\",\"Cur_Scale\",    \"Date\"],\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
									"    \"Cur_ID\": {\"type\": \"integer\"},\r",
									"    \"Cur_Name\": {\"type\": \"string\"},\r",
									"    \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
									"    \"Cur_Scale\": {\"type\": \"integer\"},\r",
									"    \"Date\": {\"type\": \"string\"}\r",
									"  },\r",
									"}\r",
									"pm.test('Schema is valid', function () {\r",
									"let isValidSchema = tv4.validate(person, schema, true, true);\r",
									"pm.expect(isValidSchema).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/curr_byn",
							"host": [
								"{{url}}"
							],
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* 3 гл.составл цикла:\r",
									"- начало\r",
									"-условия \r",
									"-шаг\r",
									"for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2\r",
									"*/\r",
									"\t//// получить список валют \r",
									"pm.test(\"List_currency\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    //let i = 0;\r",
									"    for ( let i=0; i< jsonData.length; i++){\r",
									"    const options = {\r",
									"    method:\"POST\",\r",
									"    url: \"http://116.203.27.46:5002/curr_byn\",\r",
									"    body: {\r",
									"    mode: \"formdata\", formdata:[\r",
									"            {'key':'auth_token', 'value': pm.variables.get('token')}\r",
									"            ,{'key': 'curr_code', 'value': jsonData[i].Cur_ID}]\r",
									"    }\r",
									"   };\r",
									"pm.sendRequest(options,(error, response) => {\r",
									"if (response.code == 200){ \r",
									"   console.log(response.json());i++;\r",
									"   } \r",
									" else if (response.code == 500){\r",
									"i++}   \r",
									"else {i++}\r",
									"});\r",
									"}});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "Cur_ID",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/currency",
							"host": [
								"{{url}}"
							],
							"path": [
								"currency"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LESSONS",
			"item": [
				{
					"name": "First",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://116.203.27.46:5002/first",
							"protocol": "http",
							"host": [
								"116",
								"203",
								"27",
								"46"
							],
							"port": "5002",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_method",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/get_method?name=Vitaliya&age=28",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Vitaliya"
								},
								{
									"key": "age",
									"value": "28"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "new_data_lesson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let req = request.data\r",
									"let req_salary=req.salary\r",
									"console.log(req_salary)\r",
									"\r",
									"pm.test(\"salary\", function (){\r",
									"let jsonData =pm.response.json();\r",
									"pm.expect(jsonData.salary[0]).to.eql(parseInt(req_salary));\r",
									"});  \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "28",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Vitaliya",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}